type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EOF
  | PUTS
  | COMMA
  | ASSIGN
  | DOT
  | LITERAL of (int)
  | STRLITERAL of (string)
  | CHAR of (char)
  | VARIABLE of (string)
  | WINDOW
  | LABEL
  | LPAREN
  | RPAREN
  | RETURN

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 26 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
    0 (* EOF *);
  261 (* PUTS *);
  262 (* COMMA *);
  263 (* ASSIGN *);
  264 (* DOT *);
  269 (* WINDOW *);
  270 (* LABEL *);
  271 (* LPAREN *);
  272 (* RPAREN *);
  273 (* RETURN *);
    0|]

let yytransl_block = [|
  265 (* LITERAL *);
  266 (* STRLITERAL *);
  267 (* CHAR *);
  268 (* VARIABLE *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\000\000"

let yylen = "\002\000\
\003\000\003\000\003\000\003\000\004\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\005\000\008\000\001\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\006\000\007\000\008\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\003\000\004\000\000\000\005\000\000\000\
\000\000\000\000\013\000\000\000\000\000\014\000"

let yydgoto = "\002\000\
\010\000\011\000"

let yysindex = "\255\255\
\036\255\000\000\255\254\000\000\000\000\000\000\013\255\054\255\
\054\255\000\000\069\255\054\255\045\255\009\255\069\255\054\255\
\054\255\054\255\054\255\054\255\015\255\016\255\007\255\001\255\
\000\000\023\255\023\255\000\000\000\000\001\255\000\000\020\255\
\014\255\027\255\000\000\025\255\028\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\006\000\
\000\000\007\000\009\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\020\000"

let yytablesize = 281
let yytable = "\001\000\
\009\000\016\000\017\000\018\000\019\000\010\000\001\000\011\000\
\002\000\016\000\017\000\018\000\019\000\012\000\020\000\016\000\
\017\000\018\000\019\000\013\000\020\000\033\000\013\000\032\000\
\025\000\018\000\019\000\014\000\015\000\035\000\031\000\021\000\
\024\000\034\000\037\000\026\000\027\000\028\000\029\000\030\000\
\003\000\036\000\015\000\038\000\004\000\005\000\006\000\007\000\
\016\000\003\000\008\000\000\000\009\000\004\000\005\000\006\000\
\022\000\023\000\003\000\008\000\000\000\000\000\004\000\005\000\
\006\000\007\000\000\000\000\000\008\000\016\000\017\000\018\000\
\019\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\009\000\000\000\009\000\001\000\
\001\000\002\000\002\000\010\000\001\000\011\000\002\000\000\000\
\009\000\000\000\000\000\000\000\000\000\010\000\001\000\011\000\
\002\000"

let yycheck = "\001\000\
\000\000\001\001\002\001\003\001\004\001\000\000\000\000\000\000\
\000\000\001\001\002\001\003\001\004\001\015\001\006\001\001\001\
\002\001\003\001\004\001\007\001\006\001\015\001\007\001\008\001\
\016\001\003\001\004\001\008\000\009\000\016\001\016\001\012\000\
\013\000\014\001\010\001\016\000\017\000\018\000\019\000\020\000\
\005\001\015\001\000\000\016\001\009\001\010\001\011\001\012\001\
\000\000\005\001\015\001\255\255\017\001\009\001\010\001\011\001\
\012\001\013\001\005\001\015\001\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\001\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\006\001\001\001\
\002\001\001\001\002\001\006\001\006\001\006\001\006\001\255\255\
\016\001\255\255\255\255\255\255\255\255\016\001\016\001\016\001\
\016\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EOF\000\
  PUTS\000\
  COMMA\000\
  ASSIGN\000\
  DOT\000\
  WINDOW\000\
  LABEL\000\
  LPAREN\000\
  RPAREN\000\
  RETURN\000\
  "

let yynames_block = "\
  LITERAL\000\
  STRLITERAL\000\
  CHAR\000\
  VARIABLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 25 "parser.mly"
                              ( Binop(_1, Add, _3) )
# 197 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 26 "parser.mly"
                              ( Binop(_1, Sub, _3) )
# 205 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 27 "parser.mly"
                              ( Binop(_1, Mul, _3) )
# 213 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 28 "parser.mly"
                              ( Binop(_1, Div, _3) )
# 221 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 29 "parser.mly"
                              ( Puts(_3) )
# 228 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 30 "parser.mly"
                              ( Lit(_1) )
# 235 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
                              ( StrLit(_1) )
# 242 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 32 "parser.mly"
                              ( Char(_1) )
# 249 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 33 "parser.mly"
                              ( Var(_1) )
# 256 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 34 "parser.mly"
                              ( Asn(_1, _3) )
# 264 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 35 "parser.mly"
                              ( Seq(_1, _3) )
# 272 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 36 "parser.mly"
                              ( _2 )
# 279 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    Obj.repr(
# 37 "parser.mly"
                                             ( Window(_1) )
# 286 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 38 "parser.mly"
                                                                  ( CreateLabel (_1, _3, _7))
# 295 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 41 "parser.mly"
           ( Expr(_1) )
# 302 "parser.ml"
               : Ast.stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 42 "parser.mly"
                  ( Return(_2) )
# 309 "parser.ml"
               : Ast.stmt))
(* Entry stmt *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let stmt (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.stmt)
